version: "3"
services:
  # Backend-API
  backend-app:
    # DockerfileまでのPath
    build: .
    # ports => HostPort: CotainerPort の形で、Portを公開している。
    ports:
      - "5001:5000"
    # コンテナに名前をつける
    container_name: flask_api
    # Hostマシンの ./app を Container の /usr/src/app にマウントしています。
    volumes:
      - ./app:/usr/src/app
      - /app/__pycache__
    # 環境変数で、Flaskを開発用サーバーとして指定する => 開発用-Serverには、Hot-Reload機能がある！
    # Flask の開発用サーバーには、ファイルの変更を検知して自動的にアプリケーションを再起動する機能があります。
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development
      # Selenium Container の URL を環境変数に設定
      SELENIUM_URL: http://selenium:4444/wd/hub
    # Flaskを実行するコマンド: HotReload の Optionを付与している (--debugger --reload)
    command: flask run --host=0.0.0.0 --debugger --reload
    # Containerが接続するNetworkを定義
    networks:
      - default
      # ユーザー定義の独自_Network
      - industry_judgement_app_network
  # Selenium Container (Chrome)
  selenium:
    # 通常の環境では、以下のイメージを使います。
    # image: selenium/standalone-chrome
    # M1 Mac など ARM で動作する環境では、以下のイメージを使います。
    image: seleniarm/standalone-chromium
    container_name: selenium
    ports:
      # Selenium サーバに接続するポート
      - "4444:4444"
      # VNC で接続するポート
      - "5900:5900"
      # Selenium サーバのログを出力するポート
      - "7900:7900"
    # コンテナが使用するメモリの上限を設定
    shm_size: "2gb"
    networks:
      - industry_judgement_app_network
# servicesと同じ階層(レベル)で、networks という項目を設定
# Docker Compose環境が接続するNetworkを追加する
networks:
  industry_judgement_app_network:
    name: industry_judgement_app_network
    # external: true はdocker-composeで管理されていない外部のネットワークという意味
    external: true
